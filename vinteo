addEventListener("fetch", event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const url = new URL(request.url);
  const { pathname, searchParams } = url;

  // Ensure we're using a valid path for the Worker
  if (pathname !== "/play" && pathname !== "/play.m3u8" && pathname !== "/play.mpd") {
    return new Response("Invalid endpoint. Use /play, /play.m3u8, or /play.mpd", { status: 404 });
  }

  const channelId = searchParams.get('id');
  const type = searchParams.get('type');

  if (!channelId || !type) {
    return new Response("Invalid request, 'id' and 'type' parameters are required", {
      status: 400,
    });
  }

  // Extract IP address
  const clientIP = request.headers.get("CF-Connecting-IP") || "180.252.165.100";

  // Set the headers required for the request
  const headers = {
    "Host": "api.vidio.com",
    "x-client": "1727549299",
    "x-signature": "867abd3871cc2f97026b793f9235de9f5216ec1593589be2fa547decd3f9a207",
    "referer": "androidtv-app://com.vidio.android.tv",
    "x-api-platform": "tv-android",
    "x-api-auth": "laZOmogezono5ogekaso5oz4Mezimew1",
    "user-agent": "tv-android/2.22.3 (517)",
    "x-api-app-info": "tv-android/10/2.22.3-517",
    "accept-language": "id",
    "X-Forwarded-For": clientIP,
    "content-type": "application/vnd.api+json",
    "x-user-email": "josstv450@gmail.com",
    "x-user-token": "XCThv4LK7Q9aAMSswGgy",
    "x-visitor-id": "d3ab94ce-024e-4bd9-86c8-8485ab63dee3",
    "x-authorization": "eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7InR5cGUiOiJhY2Nlc3NfdG9rZW4iLCJ1aWQiOjE2Nzk1MzI0OX0sImV4cCI6MTcyNzU5MTU1NH0.WBZMP00TO3i_EmqH6f702M7ViAT7la_sBVE9NaY-DQg",
    };

  // Make the API request to get the video stream links
  const apiUrl = `https://api.vidio.com/livestreamings/${channelId}/stream?initialize=true`;
  
  const apiResponse = await fetch(apiUrl, {
    method: 'GET',
    headers: headers,
  });
  
  if (!apiResponse.ok) {
    const errorMessage = `Failed to retrieve stream data: ${apiResponse.status} ${apiResponse.statusText}`;
    return new Response(errorMessage, { status: apiResponse.status });
  }

  const streamData = await apiResponse.json();

  // Log the response for debugging
  console.log("API Response:", JSON.stringify(streamData));

  // Check if the expected properties exist
  if (!streamData.data || !streamData.data.attributes) {
    return new Response("Invalid stream data structure returned from API", { status: 500 });
  }

  // Extract necessary values
  const hls = streamData.data.attributes.hls;
  const mpd = streamData.data.attributes.dash;
  const widevine = streamData.data.attributes.custom_data ? streamData.data.attributes.custom_data.widevine : null;

  // Handle different stream types
  if (type === "drm") {
    if (!widevine) {
      return new Response("Widevine data not available", { status: 404 });
    }
    const redirectUrl = `https://license-global.pallycon.com/ri/licenseManager.do?pallycon-customdata-v2=${widevine}`;
    return Response.redirect(redirectUrl, 307);
  } else if (type === "hls") {
    return Response.redirect(hls, 302);
  } else if (type === "dash") {
    return Response.redirect(mpd, 302);
  } else {
    return new Response("Invalid type parameter. Valid values are: hls, dash, drm", {
      status: 400,
    });
  }
}
